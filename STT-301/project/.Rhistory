geom_point(data = state.data, aes(x = long,y=lat, size = amount.per.state, colour = "red", fill=NA))
m = map_data('state')
ggplot() +
geom_polygon( data=m, aes(x=long, y=lat,group=group),colour="black", fill="white" )+
geom_point(data = state.data, aes(x = long,y=lat, size = amount.per.state, colour = "red", fill="viridis"))
m = map_data('state')
ggplot() +
geom_polygon( data=m, aes(x=long, y=lat,group=group),colour="black", fill="white" )+
geom_point(data = state.data, aes(x = long,y=lat, size = amount.per.state, colour = "red"))
m = map_data('state')
ggplot() +
geom_polygon( data=m, aes(x=long, y=lat,group=group),colour="black", fill="white" )+
geom_point(data = state.data, aes(x = long,y=lat, size = amount.per.state), colour = "red")
m = map_data('state')
ggplot() +
geom_polygon( data=m, aes(x=long, y=lat,group=group),colour="black", fill="white" )+
geom_point(data = state.data, aes(x = long,y=lat, size = amount.per.state), colour = "red", na.rm = TRUE)
m = map_data('state')
ggplot() +
geom_polygon( data=m, aes(x=long, y=lat,group=group),colour="black", fill="white" )+
geom_point(data = state.data, aes(x = long,y=lat, size = amount.per.state), colour = "red", na.rm = TRUE, fill = "white")
m = map_data('state')
ggplot() +
geom_polygon( data=m, aes(x=long, y=lat,group=group),colour="black", fill="white" )+
geom_point(data = state.data, aes(x = long,y=lat, fill = "white", size = amount.per.state), colour = "red", na.rm = TRUE)
m = map_data('state')
ggplot() +
geom_polygon( data=m, aes(x=long, y=lat,group=group),colour="black", fill="white" )+
geom_point(data = state.data, aes(x = long,y=lat, fill = "white", size = amount.per.state), colour = "red", na.rm = TRUE)
m = map_data('state')
ggplot() +
geom_polygon( data=m, aes(x=long, y=lat,group=group),colour="black", fill="white" )+
geom_point(data = state.data, aes(x = long,y=lat, fill = "white", size = amount.per.state), colour = "red", na.rm = TRUE)
m = map_data('state')
ggplot() +
geom_polygon( data=m, aes(x=long, y=lat,group=group),colour="black", fill="white" )+
geom_point(data = state.data, aes(x = long,y=lat, fill = "white", size = amount.per.state), colour = "red", na.rm = TRUE)
m = map_data('state')
ggplot() +
geom_polygon( data=m, aes(x=long, y=lat,group=group),colour="black", fill="white" )+
geom_point(data = state.data, aes(x = long,y=lat, fill = "white", size = amount.per.state), colour = "red", na.rm = TRUE)
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
library(ggplot2)
logistic <- function(x) {
exp(x)/(1 + exp(x))
}
ggplot(data.frame(x = c(-6, 6)), aes(x)) + stat_function(fun = logistic)
library(MASS)
head(Pima.tr)
Pima.tr$diabetes <- rep(0, dim(Pima.tr)[1])
Pima.tr$diabetes[Pima.tr$type == "Yes"] <- 1
head(Pima.tr)
diabetes.lr1 <- glm(diabetes ~ glu, data = Pima.tr, family = binomial)
diabetes.lr1
summary(diabetes.lr1)
beta0.lr.1 <- coef(diabetes.lr1)[1]
beta1.lr.1 <- coef(diabetes.lr1)[2]
beta0.lr.1
beta1.lr.1
exp(-5.504 + 0.038 * 150)/(1 + exp(-5.504 + 0.038 * 150))
diabetes.logistic.1 <- function(x){
exp(beta0.lr.1 + beta1.lr.1 * x)/(1 + exp(beta0.lr.1 + beta1.lr.1 * x))
}
ggplot(Pima.tr, aes(x = glu, y = diabetes)) + stat_function(fun = diabetes.logistic)
diabetes.logistic.1 <- function(x){
exp(beta0.lr.1 + beta1.lr.1 * x)/(1 + exp(beta0.lr.1 + beta1.lr.1 * x))
}
ggplot(Pima.tr, aes(x = glu, y = diabetes)) + stat_function(fun = diabetes.logistic.1)
+ geom_point()
diabetes.logistic.1 <- function(x){
exp(beta0.lr.1 + beta1.lr.1 * x)/(1 + exp(beta0.lr.1 + beta1.lr.1 * x))
}
ggplot(Pima.tr, aes(x = glu, y = diabetes)) + stat_function(fun = diabetes.logistic.1)))
diabetes.logistic.1 <- function(x){
exp(beta0.lr.1 + beta1.lr.1 * x)/(1 + exp(beta0.lr.1 + beta1.lr.1 * x))
}
ggplot(Pima.tr, aes(x = glu, y = diabetes)) +
stat_function(fun = diabetes.logistic.1)+
geom_point()
ggplot(Pima.tr, aes(x = glu, y = diabetes)) +
geom_point() +
stat_smooth(method = "glm", method.args = list(family = "binomial"), se = F)
head(Pima.te)
diabetes.probs.1 <- predict(diabetes.lr1, Pima.te, type = "response")
head(diabetes.probs.1)
diabetes.predict.1 <- rep("No", dim(Pima.te)[1])
diabetes.predict.1[diabetes.probs.1 > 0.5] <- "Yes"
head(diabetes.predict.1)
length(diabetes.predict.1[diabetes.predict.1 == Pima.te$type])/dim(Pima.te)[1]
diabetes.lr2 <- glm(diabetes ~ glu + bmi, data = Pima.tr, family = binomial)
diabetes.lr2 <- glm(diabetes ~ glu + bmi, data = Pima.tr, family = binomial)
diabetes.lr2
summary(diabetes.lr2)
diabetes.probs.2 <- predict(diabetes.lr2, Pima.te, type = "response")
diabetes.probs.2 <- predict(diabetes.lr2, Pima.te, type = "response")
head(diabetes.probs.2)
diabetes.predict.2 <- rep("No", dim(Pima.te)[1])
diabetes.predict.2[diabetes.probs.2 > 0.5] <- "Yes"
head(diabetes.predict.2)
length(diabetes.predict.2[diabetes.predict.2 == Pima.te$type])/dim(Pima.te)[1]
lr.int <- -coef(diabetes.lr2)[1]/coef(diabetes.lr2)[3]
lr.slope <- -coef(diabetes.lr2)[2]/coef(diabetes.lr2)[3]
ggplot(Pima.tr, aes(x = glu, y = bmi)) + geom_point(aes(color = type)) +
geom_abline(intercept = lr.int, slope = lr.slope)
data(iris)
head(iris)
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point(aes(color = Species))
ggplot(data = iris, aes(x = Petal.Length, y = Petal.Width)) +
geom_point(aes(color = Species))
set.seed(321)
selected <- sample(1:150, replace = FALSE, size = 75)
iris.train <- iris[selected, ]
iris.test <- iris[-selected, ]
library(VGAM)
install.packages("VGAM")
library(VGAM)
iris.lr <- vglm(Species ~ Petal.Width + Petal.Length, data = iris.train, family = multinomial)
summary(iris.lr)
iris.probs <- predict(iris.lr, iris.test[, c(3, 4)], type = "response")
iris.probs <- predict(iris.lr, iris.test[, c(3, 4)], type = "response")
head(iris.probs)
which.max(c(2, 3, 1, 5, 8, 3))
which.max(c(2, 20, 4, 5, 9, 1, 0))
class.predictions <- apply(iris.probs, 1, which.max)
head(class.predictions)
class.predictions[class.predictions == 1] <- levels(iris$Species)[1]
class.predictions[class.predictions == 2] <- levels(iris$Species)[2]
class.predictions[class.predictions == 3] <- levels(iris$Species)[3]
head(class.predictions)
table(class.predictions, iris.test$Species)
u.knn <- "http://blue.for.msu.edu/FOR875/data/knnExample.csv"
knnExample <- read.csv(u.knn, header=TRUE)
str(knnExample)
ggplot(data = knnExample, aes(x = x1, y = x2)) +
geom_point(aes(color = as.factor(class))) +
theme_bw()
expand.grid(x = c(1, 2), y = c(5, 3.4, 2))
min(knnExample$x1)
min(knnExample$x1)
max(knnExample$x1)
min(knnExample$x1)
max(knnExample$x1)
min(knnExample$x2)
max(knnExample$x2)
x.test <- expand.grid(x1 = seq(-2.6, 4.2, by = 0.1), x2 = seq(-2, 2.9, by = 0.1))
library(class)
Example_knn <- knn(knnExample[, c(1, 2)], x.test, knnExample[,3], k = 15, prob = TRUE)
library(class)
Example_knn <- knn(knnExample[, c(1, 2)], x.test, knnExample[,3], k = 15, prob = TRUE)
prob <- attr(Example_knn, "prob")
library(class)
Example_knn <- knn(knnExample[, c(1, 2)], x.test, knnExample[,3], k = 15, prob = TRUE)
prob <- attr(Example_knn, "prob")
head(prob)
library(dplyr)
df1 <- mutate(x.test, prob = prob, class = 0, prob_cls = ifelse(Example_knn == class, 1, 0))
str(df1)
df2 <- mutate(x.test, prob = prob, class = 1, prob_cls = ifelse(Example_knn == class, 1, 0))
bigdf <- bind_rows(df1, df2)
names(knnExample)
ggplot(bigdf) +
geom_point(aes(x = x1, y = x2, col = class),data = mutate(x.test, class = Example_knn), size = 0.5) +
geom_point(aes(x = x1, y = x2, col = as.factor(class)), size = 4, shape = 1, data = knnExample) +
geom_contour(aes(x = x1, y = x2, z = prob_cls, group = as.factor(class), color = as.factor(class)), size = 1, bins = 1, data = bigdf) +
theme_bw()
Example_knn <- knn(knnExample[, c(1, 2)], x.test, knnExample[,3], k = 1, prob = TRUE)
prob <- attr(Example_knn, "prob")
head(prob)
df1 <- mutate(x.test, prob = prob, class = 0, prob_cls = ifelse(Example_knn == class, 1, 0))
str(df1)
df2 <- mutate(x.test, prob = prob, class = 1, prob_cls = ifelse(Example_knn == class, 1, 0))
bigdf <- bind_rows(df1, df2)
ggplot(bigdf) + geom_point(aes(x = x1, y = x2, col = class), data = mutate(x.test, class = Example_knn), size = 0.5) +
geom_point(aes(x = x1, y = x2, col = as.factor(class)), size = 4, shape = 1, data = knnExample) +
geom_contour(aes(x = x1, y = x2, z = prob_cls, group = as.factor(class), color = as.factor(class)), size = 1, bins = 1, data = bigdf) +
theme_bw()
Pima.tr[, 1:7] <- scale(Pima.tr[, 1:7], center = TRUE, scale = TRUE)
Pima.te[, 1:7] <- scale(Pima.te[, 1:7], center = TRUE, scale = TRUE)
knn_Pima <- knn(Pima.tr[, c(2, 5)], Pima.te[, c(2, 5)], Pima.tr[, 8], k = 15, prob = TRUE)
table(knn_Pima, Pima.te[, 8])
sd(iris.train$Petal.Width)
sd(iris.train$Petal.Length)
head(iris.train)
knn_iris <- knn(iris.train[, c(3, 4)], iris.test[, c(3, 4)], iris.train[, 5], k = 1, prob = TRUE)
table(knn_iris, iris.test[, 5])
knn_iris <- knn(iris.train[, c(3, 4)], iris.test[, c(3, 4)], iris.train[, 5], k = 3, prob = TRUE)
table(knn_iris, iris.test[, 5])
knn_iris <- knn(iris.train[, c(3, 4)], iris.test[, c(3, 4)], iris.train[, 5], k = 15, prob
knn_iris <- knn(iris.train[, c(3, 4)], iris.test[, c(3, 4)], iris.train[, 5], k = 15, prob= TRUE)
table(knn_iris, iris.test[, 5])
data("table1")
data("table2")
data("table3")
data("table4")
table1
data("table1")
data("table2")
data("table3")
table1
library("table1")
data("table1")
data("table2")
data("table3")
table1
clear()
clear
library(tidyr)
data("table1")
data("table2")
data("table3")
table1
?knn
train <- rbind(iris3[1:25,,1], iris3[1:25,,2], iris3[1:25,,3])
test <- rbind(iris3[26:50,,1], iris3[26:50,,2], iris3[26:50,,3])
cl <- factor(c(rep("s",25), rep("c",25), rep("v",25)))
knn(train, test, cl, k = 3, prob=TRUE)
knitr::opts_chunk$set(fig.path='Figs/', warning=FALSE, message=FALSE, dev = "png", comment = NA)
packages = c("class","ISLR","class")
#if a package is installed, it will be loaded
#if any are not, the missing package(s) will be installed and loaded
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
})
#verify they are loaded
search()
data(Weekly)
str(Weekly)
ggplot(data = Weekly,
mapping = aes(x=Direction, y=year)) +
geom_point(aes(color = "red"),
size=5)
ggplot(data = Weekly,
mapping = aes(x=Direction, y=Year)) +
geom_point(aes(color = "red"),
size=5)
ggplot(data = Weekly,
mapping = aes(x=Year, y=Direction)) +
geom_point(aes(color = "red"),
size=5)
ggplot(data = Weekly,
mapping = aes(x=Year, y=Direction)) +
geom_point(aes(color = "red"),
size=5)
ggplot(data = Weekly,
mapping = aes(x=Lag1, y=Direction)) +
geom_point(aes(color = "red"),
size=5)
ggplot(data = Weekly,
mapping = aes(x=Lag2, y=Direction)) +
geom_point(aes(color = "red"),
size=5)
ggplot(data = Weekly,
mapping = aes(x=Lag4, y=Direction)) +
geom_point(aes(color = "red"),
size=5)
ggplot(data = Weekly,
mapping = aes(x=Volume, y=Direction)) +
geom_point(aes(color = "red"),
size=5)
ggplot(data = Weekly,
mapping = aes(x=Year, y=Direction)) +
geom_point(aes(color = "red"),
size=5)
ggplot(data = Weekly,
mapping = aes(x=Lag1, y=Direction)) +
geom_point(aes(color = "red"),
size=5)
ggplot(data = Weekly,
mapping = aes(x=Lag2, y=Direction)) +
geom_point(aes(color = "red"),
size=5)
ggplot(data = Weekly,
mapping = aes(x=Lag4, y=Direction)) +
geom_point(aes(color = "red"),
size=5)
ggplot(data = Weekly,
mapping = aes(x=Volume, y=Direction)) +
geom_jitter(aes(size=5))
weekly.long <- Weekly %>% gather(key= "Lag", value = "return", Lag1:Lag5)
ggplot(data = weekly.long,
mapping = aes(x=Lag, y=Direction)) +
geom_point(aes(color = "red"),
size=5) +
facet_wrap(~factor(Lag))
weekly.long <- Weekly %>% gather(key= "Lag", value = "return", Lag1:Lag5)
ggplot(data = weekly.long,
mapping = aes(x=Lag, y=Direction)) +
geom_jitter(aes(color = "red"),
size=5) +
facet_wrap(~factor(Lag))
weekly.long <- Weekly %>% gather(key= "Lag", value = "return", Lag1:Lag5)
ggplot(data = weekly.long,
mapping = aes(x=Lag, y=return)) +
geom_jitter(aes(color = "red"),
size=5) +
facet_wrap(~factor(Lag))
weekly.long <- Weekly %>% gather(key= "Lag", value = "return", Lag1:Lag5)
ggplot(data = weekly.long,
mapping = aes(x=Direction, y=return)) +
geom_jitter(aes(color = "red"),
size=5) +
facet_wrap(~factor(Lag))
weekly.long <- Weekly %>% gather(key= "Lag", value = "return", Lag1:Lag5)
ggplot(data = weekly.long,
mapping = aes(x=Direction, y=return)) +
geom_point(aes(color = "red"),
size=5) +
facet_wrap(~factor(Lag))
weekly.long <- Weekly %>% gather(key= "Lag", value = "return", Lag1:Lag5)
ggplot(data = weekly.long, +
geom_point(aes(x=Direction, y=return)),
size=5) +
facet_wrap(~factor(Lag))
weekly.long <- Weekly %>% gather(key= "Lag", value = "return", Lag1:Lag5)
ggplot(data = weekly.long) +
geom_point(aes(x=Direction, y=return),
size=5) +
facet_wrap(~factor(Lag))
ggplot(data = weekly.long) +
geom_jitter(aes(x=Direction, y=return),
size=5) +
facet_wrap(~factor(Lag))
ggplot(data = weekly.long) +
geom_jitter(aes(x=Direction, y=return),
size=2) +
facet_wrap(~factor(Lag))
weekly.long <- Weekly %>% gather(key= "Lag", value = "return", Lag1:Lag5)
ggplot(data = weekly.long) +
geom_point(aes(x=Direction, y=return),
size=2) +
facet_wrap(~factor(Lag))
ggplot(data = weekly.long) +
geom_point(aes(x=Direction, y=Volume),
size=5)
knn_iris <- knn(Weekly.train, Weekly.test, Weekly[2], k = 3, prob = TRUE)
Weekly.train <- Weekly %>% filter(Year < 2009)
Weekly.test <- Weekly %>% filter(Year >= 2009)
dim(Weekly.train)
dim(Weekly.test)
knn_iris <- knn(Weekly.train, Weekly.test, Weekly[2], k = 3, prob = TRUE)
knn_iris <- knn(Weekly.train, Weekly.test, Weekly[2], k = 9, prob = TRUE)
knn_iris <- knn(Weekly.train, Weekly.test, Weekly[2], k = 9, cl=Weekly$Direction, prob = TRUE)
knn_weekly <- knn(Weekly.train, Weekly.test, Weekly[2], k = 9, cl=Weekly$Direction, prob = TRUE)
Weekly[2]
knn_weekly <- knn(Weekly.train, Weekly.test, Weekly[2][1:985], k = 9, cl=Weekly$Direction, prob = TRUE)
knn_weekly <- knn(Weekly.train[2], Weekly.test[2], k = 9, cl=Weekly.train$Direction, prob = TRUE)
#table(knn_weekly, Weekly.test)
knn_weekly <- knn(Weekly.train[2], Weekly.test[2], k = 9, cl=Weekly.train$Direction, prob = TRUE)
table(knn_weekly, Weekly.test$Direction)
knn_weekly <- knn(Weekly.train[2], Weekly.test[Lag2], k = 9, cl=Weekly.train$Direction, prob = TRUE)
Weekly$Lag2
knn_weekly <- knn(Weekly.train[2], Weekly.test[2], k = 9, cl=Weekly.train$Direction, prob = TRUE)
table(knn_weekly, Weekly.test$Direction)
knn_weekly <- knn(Weekly.train[1], Weekly.test[1], k = 9, cl=Weekly.train$Direction, prob = TRUE)
table(knn_weekly, Weekly.test$Direction)
knn_weekly <- knn(Weekly.train[2], Weekly.test[2], k = 9, cl=Weekly.train$Direction, prob = TRUE)
table(knn_weekly, Weekly.test$Direction)
packages = c("plyr","dostats",)
packages = c("plyr","dostats")
#if a package is installed, it will be loaded
#if any are not, the missing package(s) will be installed and loaded
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
})
#verify they are loaded
search()
setwd("~/Documents/Classes/Data-R/STT-301/project")
files <- list.files(pattern = ".csv")
for (i in seq_along(files)) {
assign(paste("Df", i, sep = "."), read.csv(files[i]))
assign(paste(paste("Df", i, sep = ""), "summary", sep = "."),
ldply(get(paste("Df", i, sep = ".")), dostats, sum, min, mean, median, max))
}
files <- list.files(pattern = ".csv")
for (i in seq_along(files)) {
assign(paste("Df", i, sep = "."), read.csv(files[i]))
assign(paste(paste("Df", i, sep = ""), "summary", sep = "."),
get(paste("Df", i, sep = ".")))
}
files <- list.files(pattern = ".csv")
files
state.data <- left_join(c(statelatlong, loaned.state), by = "addr_state" )
state.data <- list(statelatlong, loaned.state)%>% reduce(left_join, by = "addr_state")
state.data
temp <- list.files(pattern = "*.csv")
myfiles <- lapply(temp, read.csv, skip=1)
temp <- list.files(pattern = "*.csv")
myfiles <- lapply(temp, read.csv)
temp <- list.files(pattern = "*.csv")
myfiles <- lapply(temp, read_csv)
state.data <- myfiles %>% reduce(left_join, by = "addr_state")
state.data <- myfiles %>% reduce(left_join, by = "State")
test <- list(data_frame(col1 = 1:3, col2 = 2:5), data_frame(col1 = 7:10, col2 = 6:9))
test <- list(data_frame(col1 = 1:4, col2 = 2:5), data_frame(col1 = 7:10, col2 = 6:9))
install.packages("reshape")
reshape::merge_all(test)
test <- list(data_frame(col1 = 1:5, col2 = 2:5), data_frame(col1 = 7:10, col2 = 6:9))
test <- list(data_frame(col1 = 1:4, col2 = 2:5), data_frame(col1 = 7:10, col2 = 6:9))
test <- list(data_frame(col1 = 1:4, col2 = 2:5), data_frame(col1 = 7:10, col2 = 6:9))
for (i in 1:length(test)) {
paste("files",i) <- myfiles[i]
}
test <- list(data_frame(col1 = 1:4, col2 = 2:5), data_frame(col1 = 7:10, col2 = 6:9))
for (i in 1:length(test)) {
paste("files",i) <- myfiles[[i]]
}
test <- list(data_frame(col1 = 1:4, col2 = 2:5), data_frame(col1 = 7:10, col2 = 6:9))
for (i in 1:length(test)) {
get(paste("files",i)) <- myfiles[[i]]
}
test <- list(data_frame(col1 = 1:4, col2 = 2:5), data_frame(col1 = 7:10, col2 = 6:9))
for (i in 1:length(test)) {
get(paste("files",i)) <- test[[i]]
}
test <- list(data_frame(col1 = 1:4, col2 = 2:5), data_frame(col1 = 7:10, col2 = 6:9))
for (i in 1:length(test)) {
get(paste("files",i)) <- test[i]
}
test <- list(data_frame(col1 = 1:4, col2 = 2:5), data_frame(col1 = 7:10, col2 = 6:9))
for (i in 1:length(test)) {
paste("files",i) <- test[i]
}
loaned.state <- loanStats3a %>% group_by(addr_state) %>% summarise(loan.per.state = sum(loan_amnt))
loaned.state
data_is.na <- sapply(loanStats3a, function(x) sum(is.na(x)))
as.tibble(data_is.na) %>% View()
loaned.state <- loanStats3a %>% group_by(addr_state) %>% summarise(loan.per.state = sum(loan_amnt))
loaned.state
loanStats3a <- read_csv(file="LoanStats3a.csv", skip = 1)
loanStats3a
data_is.na <- sapply(loanStats3a, function(x) sum(is.na(x)))
as.tibble(data_is.na) %>% View()
library(tidyverse)
library(mapdata)
library(maps)
library(stringr)
loanStats3a <- read_csv(file="LoanStats3a.csv", skip = 1)
loanStats3a
loanStats3a <- read_csv(file="LoanStats3a.csv", skip = 1)
loanStats3a <- as.tibble(loanStats3a)
loanStats3a
data_is.na <- sapply(loanStats3a, function(x) sum(is.na(x)))
as.tibble(data_is.na)
data_is.na <- sapply(loanStats3a, function(x) sum(is.na(x)))
as.tibble(data_is.na) %>% View()
statelatlong <- read_csv(file="statelatlong.csv", skip = 1)
statelatlong <- as.tibble(statelatlong)
statelatlong
data_is.na <- sapply(loanStats3a, function(x) sum(is.na(x)))
as.tibble(data_is.na) %>% View()
loaned.state <- loanStats3a %>% group_by(addr_state) %>% summarise(loan.per.state = sum(loan_amnt))
loaned.state
statelatlong <- read_csv(file="statelatlong.csv")
statelatlong <- as.tibble(statelatlong)
statelatlong
loaned.state <- loanStats3a %>% group_by(addr_state) %>% summarise(loan.per.state = sum(loan_amnt))
loaned.state
data_is.na <- sapply(loanStats3a, function(x) sum(is.na(x)))
as.tibble(data_is.na)
data_is.na <- sapply(loanStats3a, function(x) sum(is.na(x)))
data_is.na
loaned.state <- loanStats3a %>% group_by(addr_state) %>% summarise(loan.per.state = sum(loan_amnt))
loaned.state
state.data <- left_join(statelatlong, loaned.state, by = "addr_state" )
data_is.na <- sapply(loanStats3a, function(x) sum(is.na(x)))
data_is.na <- as.tibble(data_is.na)
data_is.na
loaned.state <- loanStats3a %>% group_by(addr_state) %>% summarise(loan.per.state = sum(loan_amnt))
loaned.state
loanStats3a <- read_csv(file="LoanStats3a.csv", skip = 1)
loanStats3a <- as.tibble(loanStats3a)
loanStats3a
loaned.state <- loanStats3a %>% group_by(addr_state) %>% summarise(loan.per.state = sum(loan_amnt))
loaned.state
loaned.state <- loanStats3a %>% group_by(addr_state) %>% summarise(loan.per.state = loan_amnt)
loaned.state
loaned.state <- loanStats3a %>% group_by(addr_state) %>% summarise(loan.per.state = sum(loan_amnt))
loaned.state
loanStats3a <- read_csv(file="LoanStats3a.csv", skip = 1)
as.tibble(loanStats3a)
loanStats3a
statelatlong <- read_csv(file="statelatlong.csv")
as.tibble(statelatlong)
data_is.na <- sapply(loanStats3a, function(x) sum(is.na(x)))
data_is.na <- as.tibble(data_is.na)
data_is.na
data_is.na <- sapply(loanStats3a, function(x) sum(is.na(x)))
as.tibble(data_is.na)
loaned.state <- loanStats3a %>% group_by(addr_state) %>% summarise(loan.per.state = sum(loan_amnt))
loaned.state
loaned.state <- loanStats3a %>% group_by(addr_state) %>% summarise(loan.per.state = mean(loan_amnt))
loaned.state
loaned.state <- loanStats3a %>% group_by(addr_state)
loaned.state
loanStats3a %>% group_by(addr_state) %>% summarise(mean(loan_amnt))
loaned.state <- loanStats3a %>% group_by(addr_state) %>% summarise(loan.per.state = mean(loan_amnt))
loaned.state
loaned.state <- loanStats3a %>% group_by(addr_state) %>% summarise(loan.per.state = sum(loan_amnt))
loaned.state
loaned.state <- loanStats3a %>% group_by(addr_state) %>% summarise(loan.per.state = sum(loan_amnt, rm.na +T))
loaned.state <- loanStats3a %>% group_by(addr_state) %>% summarise(loan.per.state = sum(loan_amnt, rm.na =T))
loaned.state
loaned.state <- loanStats3a %>% group_by(addr_state) %>% summarise(loan.per.state = sum(funded_amnt, rm.na =T))
loaned.state
