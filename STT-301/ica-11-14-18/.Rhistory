y_axis[i] <- mean(y_values, na.rm = T)
}
y_axis
replycate = 1000
y_axis <- c()
x_axis <- seq(.01, 1, by =.01)
for (var in 1:length(x_axis)){
y_values <- replicate(replycate, bankroll.fun(x_axis[var]))
y_axis[i] <- mean(y_values)
}
y_axis
x_axis
replycate = 1000
x_axis <- seq(.01, 1, by =.01)
y_axis <- numeric(length = length(x_axis))
for (var in 1:length(x_axis)){
y_values <- replicate(replycate, bankroll.fun(x_axis[var]))
y_axis[i] <- mean(y_values)
}
y_axis
replycate = 1000
x_axis <- seq(.01, 1, by =.01)
y_axis <- numeric(length = length(x_axis))
for (var in 1:length(x_axis)){
y_values <- replicate(replycate, bankroll.fun(x_axis[var]))
y_axis[i] <- mean(y_values, na.rm = T)
}
x_axis
y_axis
replycate = 1000
x_axis <- seq(.01, 1, by =.01)
y_axis <- numeric(length = length(x_axis))
for (var in 1:length(x_axis)){
y_values <- replicate(replycate, bankroll.fun(x_axis[var]))
y_axis[var] <- mean(y_values, na.rm = T)
}
y_axis
# Plot the graph
df <- data_frame(x = x_axis, y=y_axis)
ggplot(df, aes(x, y)) +
geom_line(aes(color = "red")) +
labs(x = "Simulations percentage risk", y = "Capital value", title = "Capital simulation of 1000")
# Plot the graph
df <- data_frame(x = x_axis, y=y_axis)
ggplot(df, aes(x, y)) +
geom_line(aes(color = "red")) +
labs(x = "Simulations percentage risk", y = "Capital value", title = "Capital simulation of 1000") + continuous_scale("log2")
# Plot the graph
df <- data_frame(x = x_axis, y=y_axis)
ggplot(df, aes(x, y)) +
geom_line(aes(color = "red")) +
labs(x = "Simulations percentage risk", y = "Capital value", title = "Capital simulation of 1000") + continuous_scale(trans = "log2")
# Plot the graph
df <- data_frame(x = x_axis, y=y_axis)
ggplot(df, aes(x, y)) +
geom_line(aes(color = "red")) +
labs(x = "Simulations percentage risk", y = "Capital value", title = "Capital simulation of 1000") + continuous_y_scale(trans = "log2")
# Plot the graph
df <- data_frame(x = x_axis, y=y_axis)
ggplot(df, aes(x, y)) +
geom_line(aes(color = "red")) +
labs(x = "Simulations percentage risk", y = "Capital value", title = "Capital simulation of 1000") + scale_y_continuous(trans = "log2")
# Plot the graph
df <- data_frame(x = x_axis, y=y_axis)
ggplot(df, aes(x, y)) +
geom_line(aes(color = "red")) +
labs(x = "Simulations percentage risk", y = "Capital value", title = "Capital simulation of 1000") + scale_y_continuous(trans = "log2")
# Plot the graph
df <- data_frame(x = x_axis, y=y_axis)
ggplot(df, aes(x, y)) +
geom_point(aes(color = "red")) +
labs(x = "Simulations percentage risk", y = "Capital value", title = "Capital simulation of 1000") + scale_y_continuous(trans = "log2")
# Plot the graph
df <- data_frame(x = x_axis, y=y_axis)
ggplot(df, aes(x, y)) +
geom_point(aes(color = "red")) +
labs(x = "Simulations percentage risk", y = "Capital value", title = "Capital simulation of 1000") + scale_y_continuous(trans = "log2", limits=c(NA,1))
# Plot the graph
df <- data_frame(x = x_axis, y=y_axis)
ggplot(df, aes(x, y)) +
geom_point(aes(color = "red")) +
labs(x = "Simulations percentage risk", y = "Capital value", title = "Capital simulation of 1000") + scale_y_continuous(trans = "log2", limits=c(-1,1))
# Plot the graph
df <- data_frame(x = x_axis, y=y_axis)
ggplot(df, aes(x, y)) +
geom_point(aes(color = "red")) +
labs(x = "Simulations percentage risk", y = "Capital value", title = "Capital simulation of 1000") + scale_y_continuous(trans = "log10")
replycate = 1000
x_axis <- seq(.01, 1, by =.01)
y_axis <- numeric(length = length(x_axis))
for (var in 1:length(x_axis)){
y_values <- replicate(replycate, bankroll.fun(x_axis[var]))
y_axis[var] <- mean(y_values, na.rm = T)
}
# Plot the graph
df <- data_frame(x = x_axis, y=y_axis)
ggplot(df, aes(x, y)) +
geom_point(aes(color = "red")) +
labs(x = "Simulations percentage risk", y = "Capital value", title = "Capital simulation of 1000") + scale_y_continuous(trans = "log10")
# Plot the graph
df <- data_frame(x = x_axis, y=y_axis)
ggplot(df, aes(x, y)) +
geom_point(aes(color = "red")) +
labs(x = "Simulations percentage risk", y = "Capital value", title = "Capital simulation of 1000") + scale_y_continuous(trans = "log10")
labs(x = "Simulations percentage risk", y = "Capital value", title = "Capital simulation of 1000") + scale_y_continuous(trans = "log10")
restart
# BETA
rbeta(n=20, shape1 = 1, shape2 = 2)
# CAUCHY
rcauchy(n=20)
# POISSON
rpois(n = 20, lambda = 2)
# LOGISTICS
rlogis(n = 20)
# F
rf(n = 20, df1 = 1, df2 = 1)
bankroll.fun <- function(risk, games = 1000){
initial.dollars <- 100
games.simulation <- runif(games)
for (var in 1:games){
if (games.simulation[var] <= 0.55){
initial.dollars <- initial.dollars * (1 + risk)
}else {
initial.dollars <- initial.dollars * (1 - risk)
}
}
return(initial.dollars)
}
replycate = 500
trial.vector_500 <- replicate(replycate, bankroll.fun(.8))
mean(trial.vector_500, na.rm = T)
replycate = 1000
trial.vector_1000 <- replicate(replycate, bankroll.fun(.2))
mean(trial.vector_1000, na.rm = T)
replycate = 1000
x_axis <- seq(.01, 1, by =.01)
y_axis <- numeric(length = length(x_axis))
for (var in 1:length(x_axis)){
y_values <- replicate(replycate, bankroll.fun(x_axis[var]))
y_axis[var] <- mean(y_values, na.rm = T)
}
# Plot the graph
df <- data_frame(x = x_axis, y=y_axis)
# Plot the graph
df <- data.frame(x = x_axis, y=y_axis)
ggplot(df, aes(x, y)) +
geom_point(aes(color = "red")) +
labs(x = "Simulations percentage risk", y = "Capital value", title = "Capital simulation of 1000")
packages = c("tidyverse")
#if a package is installed, it will be loaded
#if any are not, the missing package(s) will be installed and loaded
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
})
#verify they are loaded
search()
# Plot the graph
df <- data_frame(x = x_axis, y=y_axis)
ggplot(df, aes(x, y)) +
geom_point(aes(color = "red")) +
labs(x = "Simulations percentage risk", y = "Capital value", title = "Capital simulation of 1000")
# Plot the graph
df <- data_frame(x = x_axis, y=y_axis)
ggplot(df, aes(x, y)) +
geom_point(aes(color = "red")) +
labs(x = "Simulations percentage risk", y = "Capital value", title = "Capital simulation of 1000") +
scale_y_log10(breaks=c(1, 2))
replycate = 1000
x_axis <- seq(.1, 10, by =.1)
y_axis <- numeric(length = length(x_axis))
for (var in 1:length(x_axis)){
y_values <- replicate(replycate, bankroll.fun(x_axis[var]))
y_axis[var] <- mean(y_values, na.rm = T)
}
# Plot the graph
df <- data_frame(x = x_axis, y=y_axis)
ggplot(df, aes(x, y)) +
geom_point(aes(color = "red")) +
labs(x = "Simulations percentage risk", y = "Capital value", title = "Capital simulation of 1000") +
scale_y_log10(breaks=c(1, 2))
replycate = 1000
x_axis <- seq(.01, 1, by =.01)
y_axis <- numeric(length = length(x_axis))
for (var in 1:length(x_axis)){
y_values <- replicate(replycate, bankroll.fun(x_axis[var]))
y_axis[var] <- mean(y_values, na.rm = T)
}
# Plot the graph
df <- data_frame(x = x_axis, y=y_axis)
ggplot(df, aes(x, y)) +
geom_point(aes(color = "red")) +
labs(x = "Simulations percentage risk", y = "Capital value", title = "Capital simulation of 1000") +
scale_y_log10(breaks=c(1, 2))
# x2+y2=1
# generate x random values between -1 and 1
# generate y random values between -1 and 1
#
y_values <- runif(n = 4000000, max = 1, min = -1)
x_values <- runif(n = 4000000, max = 1, min = -1)
head(y_values)
head(x_values)
mean( (x_values**2 + y_values**2) <=1) *4
# x2+y2=1
# generate x random values between -1 and 1
# generate y random values between -1 and 1
#
y_values <- runif(n = 3000000, max = 1, min = -1)
x_values <- runif(n = 3000000, max = 1, min = -1)
head(y_values)
head(x_values)
mean( (x_values**2 + y_values**2) <=1) *4
# x2+y2=1
# generate x random values between -1 and 1
# generate y random values between -1 and 1
#
y_values <- runif(n = 3500000, max = 1, min = -1)
x_values <- runif(n = 3500000, max = 1, min = -1)
head(y_values)
head(x_values)
mean( (x_values**2 + y_values**2) <=1) *4
# BETA
rbeta(n=10, shape1 = 1, shape2 = 2)
# CAUCHY
rcauchy(n=10)
# POISSON
rpois(n = 10, lambda = 2)
# LOGISTICS
rlogis(n = 10)
# F
rf(n = 20, df1 = 1, df2 = 1)
# x2+y2=1
# generate x random values between -1 and 1
# generate y random values between -1 and 1
#
replycate = 500
trial.vector_500 <- replicate(replycate, bankroll.fun(.8))
y_values <- runif(n = 3200000, max = 1, min = -1)
x_values <- runif(n = 3200000, max = 1, min = -1)
head(y_values)
head(x_values)
mean( (x_values**2 + y_values**2) <=1) *4
# x2+y2=1
# generate x random values between -1 and 1
# generate y random values between -1 and 1
#
replycate = 500
trial.vector_500 <- replicate(replycate, bankroll.fun(.8))
y_values <- runif(n = 3500000, max = 1, min = -1)
x_values <- runif(n = 3500000, max = 1, min = -1)
head(y_values)
head(x_values)
mean( (x_values**2 + y_values**2) <=1) *4
# x2+y2=1
# generate x random values between -1 and 1
# generate y random values between -1 and 1
#
replycate = 500
trial.vector_500 <- replicate(replycate, bankroll.fun(.8))
y_values <- runif(n = 4000000, max = 1, min = -1)
x_values <- runif(n = 4000000, max = 1, min = -1)
head(y_values)
head(x_values)
mean( (x_values**2 + y_values**2) <=1) *4
# x2+y2=1
# generate x random values between -1 and 1
# generate y random values between -1 and 1
#
replycate = 500
y_values <- runif(n = 4000000, max = 1, min = -1)
x_values <- runif(n = 4000000, max = 1, min = -1)
head(y_values)
head(x_values)
pi.vector <- replicate(replycate, (x_values**2 + y_values**2) <=1)
# x2+y2=1
# generate x random values between -1 and 1
# generate y random values between -1 and 1
#
find_pi <- function() {
y_values <- runif(n = 4000000, max = 1, min = -1)
x_values <- runif(n = 4000000, max = 1, min = -1)
head(y_values)
head(x_values)
pi.value <- mean( (x_values**2 + y_values**2) <=1) *4
return(pi.value)
}
find_pi()
replycate = 500
pi.vector <- replicate(replycate, find_pi())
replycate = 20
pi.vector <- replicate(replycate, find_pi())
mean(pi.vector)
replycate = 30
pi.vector <- replicate(replycate, find_pi())
mean(pi.vector)
replycate = 50
pi.vector <- replicate(replycate, find_pi())
mean(pi.vector)
replycate = 1000
x_axis <- seq(.01, 1, by =.01)
y_axis <- numeric(length = length(x_axis))
for (var in 1:length(x_axis)){
y_values <- replicate(replycate, bankroll.fun(x_axis[var]))
y_axis[var] <- mean(y_values, na.rm = T)
}
# Plot the graph
df <- data_frame(x = x_axis, y=y_axis)
ggplot(df, aes(x, y)) +
geom_point(aes(color = "red")) +
labs(x = "Simulations percentage risk", y = "Capital value", title = "Capital simulation of 1000") +
scale_y_log10(breaks=c(1, 2))
# Plot the graph
df <- data_frame(x = x_axis, y=y_axis)
ggplot(df, aes(x, y, color = "red")) +
geom_point() +
labs(x = "Simulations percentage risk", y = "Capital value", title = "Capital simulation of 1000") +
scale_y_log10(breaks=c(1, 2))
# Initialize function with arguments,
# Argument games default value is 1000
bankroll.func <- function(risk, games = 1000){
# Initialize the initial starting dollars
initial.dollars <- 100
# create 1000 random simulated numbers
games.simulation <- runif(games)
# Loop through the simulation, if any value in the simulation
# matches or is less than winning number, increment dollar value.
for (var in 1:games){
if (games.simulation[var] <= 0.55){
initial.dollars <- initial.dollars * (1 + risk)
}else {
# Otherwise decrement the dollar value amount
initial.dollars <- initial.dollars * (1 - risk)
}
}
# return the new dollar value amount
return(initial.dollars)
}
# Run the simulations and stored the returned dollar value in a vector
# Find the mean of the returned dollar value (vector)
replycate = 1000
trial.vector_500 <- replicate(replycate, bankroll.func(.8))
mean(trial.vector_500, na.rm = T)
replycate = 1000
trial.vector_1000 <- replicate(replycate, bankroll.func(.2))
mean(trial.vector_1000, na.rm = T)
# Set replication values
replycate = 1000
# Create an x_axis vector values from 0.01 to 1 in increment of 0.01
x_axis <- seq(.01, 1, by =.01)
# Initialize y_axis as an empty vector
y_axis <- numeric(length = length(x_axis))
# run through the x_axis values and apply `bankrool.fun` to it values
for (var in 1:length(x_axis)){
y_values <- replicate(replycate, bankroll.func(x_axis[var]))
y_axis[var] <- mean(y_values, na.rm = T)
}
# Plot the graph
df <- data_frame(x = x_axis, y=y_axis)
ggplot(df, aes(x, y, color = "red")) +
geom_point() +
labs(x = "Simulations percentage risk", y = "Capital value", title = "Capital simulation of 1000") +
scale_y_log10(breaks=c(1, 2)) # Change y_axis into log form
# x2+y2=1
# generate x random values between -1 and 1
# generate y random values between -1 and 1
find.pi.func <- function() {
y_values <- runif(n = 4000000, max = 1, min = -1)
x_values <- runif(n = 4000000, max = 1, min = -1)
head(y_values)
head(x_values)
pi.value <- mean( (x_values**2 + y_values**2) <=1) *4
return(pi.value)
}
find.pi.func()
replycate = 50
pi.vector <- replicate(replycate, find.pi.func())
mean(pi.vector)
knitr::opts_chunk$set(echo = TRUE)
poisson_vector <- rpois(10, 3)
negative_binomial_vector <- rnbinom(10, 12, 0.425)
exponential_vector <- rexp(10, 3)
hypergeometric_vector <- rhyper(10, 655, 342, 3)
binomial_vector <- rbinom(10, 3, .34)
poisson_vector
negative_binomial_vector
exponential_vector
hypergeometric_vector
binomial_vector
gambling_problem <- function(n) {
one_die <- rep_len(FALSE, n)
two_dice <- rep_len(FALSE, n)
for (i in 1:n) {
one_die_result <- 6 %in% sample(1:6, 4, replace = TRUE) # rolls one die four times
one_die[i] <- one_die_result
}
two_dice_intermediate <- rep(FALSE, 24)
for (i in 1:n) {
for (e in 1:24) {
two_dice_intermediate[e] <- 12 %in% sum(sample(1:6, 2, replace = TRUE))
# for the above, determines if a 12 results from summing two dice rolls 24 times.
two_dice_result <- TRUE %in% two_dice_intermediate
}
two_dice[i] <- two_dice_result
}
result <- rep(0, 2)
result[1] <- mean(one_die) # one die probability displayed first
result[2] <- mean(two_dice) # two dice probability displayed second
result
}
gambling_problem(50000) # 50,000 simulations seems like enough
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
u.email <- "http://blue.for.msu.edu/FOR875/data/email1.txt"
email1 <- scan(u.email, what = "character", sep = "")
length(email1)
email1[1:10]
email1 <- scan(u.email, what = "character", sep = "\n")
length(email1)
email1[1:10]
u.moby <- "http://blue.for.msu.edu/FOR875/data/mobydick.txt"
moby_dick <- scan(u.moby, what = "character", sep = "\n")
moby_dick[1:25]
replycate = 1000
trial.vector_1000 <- replicate(replycate, bankroll.func(.2))
mean(trial.vector_1000, na.rm = T)
replycate = 1000
trial.vector_1000 <- replicate(replycate, bankroll.func(.2))
mean(trial.vector_1000, na.rm = T)
replycate = 1000
trial.vector_1000 <- replicate(replycate, bankroll.func(.2))
mean(trial.vector_1000, na.rm = T)
p <- c(500, 750, 1000)
n <- c(40, 50, 60)
for (i in p){
for (j in n) {
# code
fname <- paste("result", "p", i, "n", n, ".txt", sep = "")
write.table(file = fname)
}
}
p <- c(500, 750, 1000)
n <- c(40, 50, 60)
for (i in p){
for (j in n) {
# code
fname <- paste("result", "p", i, "n", n, ".txt", sep = "")
fname
#write.table(file = fname)
}
}
p <- c(500, 750, 1000)
n <- c(40, 50, 60)
for (i in p){
for (j in n) {
# code
fname <- paste("result", "p", i, "n", n, ".txt", sep = "")
fname
#write.table(file = fname)
}
}
p <- c(500, 750, 1000)
n <- c(40, 50, 60)
for (i in p){
for (j in n) {
# code
fname <- paste("result", "p", i, "n", n, ".txt", sep = "")
print(fname)
#write.table(file = fname)
}
}
knitr::opts_chunk$set(warning=FALSE, message=FALSE, comment = NA)
message <- "Dear Shawn,\n\n Text data is a little boring. \n\n Sincerely, Everyone"
message <- "Dear Shawn,\n\n Text data is a little boring. \n\n Sincerely, Everyone"
message
message
cat(message)
str.1 <- "statistical"; str.2 <- "computing"; str.3 <- "isn't that bad"
str.vec <- c(str.1, str.2, str.3) # Collect 3 strings
str.vec # All elements of the vector
str.vec[3] # The 3rd element
str.vec[-(1:2)] # All but the 1st and 2nd
head(str.vec, 2) # The first 2 elements
tail(str.vec, 2) # The last 2 elements
rev(str.vec) # Reverse the order
str.mat <- matrix("", 2, 3) # Build an empty 2 x 3 matrix
str.mat[1,] <- str.vec # Fill the 1st row with str.vec
str.mat[2,1:2] <- str.vec[1:2] # Fill the 2nd row, only entries 1 and 2, with those of str.vec
str.mat[2,3] <- "isn't a fad" # Fill the 2nd row, 3rd entry, with a new string
str.mat # All elements of the matrix
t(str.mat) # Transpose of the matrix
as.numeric("0.5")
as.numeric("0.5 ")
as.numeric("0.5e-10")
as.numeric("Hi!")
as.logical("True")
as.logical("TRU")
as.numeric(c("0.5", "TRUE"))
tolower("HELLO")
toupper("no thank you")
toupper("WhaT WiLl HaPpEn HeRe")
# read the data in here.
# how many words are in the data set?
# which index contains the word "skilling"? Jeff Skilling was the CEO of Enron. You can find some other interesting words in this data set if you know the Enron story.
# display the first ten words
enron <- readline(file = "https://archive.ics.uci.edu/ml/machine-learning-databases/bag-of-words/vocab.enron.txt")
# read the data in here.
# how many words are in the data set?
# which index contains the word "skilling"? Jeff Skilling was the CEO of Enron. You can find some other interesting words in this data set if you know the Enron story.
# display the first ten words
enron <- readline("https://archive.ics.uci.edu/ml/machine-learning-databases/bag-of-words/vocab.enron.txt")
