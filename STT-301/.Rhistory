# x2+y2=1
# generate x random values between -1 and 1
# generate y random values between -1 and 1
#
y_values <- runif(n = 4000000, max = 1, min = -1)
x_values <- runif(n = 4000000, max = 1, min = -1)
head(y_values)
head(x_values)
random_probability <- mean( (x_values**2 + y_values**2) <=1)
random_probability * 4
# x2+y2=1
# generate x random values between -1 and 1
# generate y random values between -1 and 1
#
y_values <- runif(n = 4000000, max = 1, min = -1)
x_values <- runif(n = 4000000, max = 1, min = -1)
head(y_values)
head(x_values)
mean( (x_values**2 + y_values**2) <=1) *4
packages = c("caret","tidyverse")
#if a package is installed, it will be loaded
#if any are not, the missing package(s) will be installed and loaded
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
})
#verify they are loaded
search()
knitr::opts_chunk$set(echo = TRUE)
packages = c("caret","tidyverse")
#if a package is installed, it will be loaded
#if any are not, the missing package(s) will be installed and loaded
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
})
#verify they are loaded
search()
wineurl <- "https://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data"
wine.df <- read.csv(file = wineurl, header = FALSE)
str(wine.df)
wine.df2 <- data.frame(origin = wine.df$origin, scale(wine.df[,-1]))
wine.df <- as_tibble(wine.df)
colnames(wine.df) <- c("origin", "alcohol", "acid",
"ash", "alcalinity", "magnesium",
"phenols", "flavanoids", "nonflavanoid",
"proanthocyanins","color.int", "hue",
"od", "proline")
wine.df$origin <- as.factor(wine.df$origin)
wineurl <- "https://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data"
wine.df <- read.csv(file = wineurl, header = FALSE)
str(wine.df)
wine.df <- as_tibble(wine.df)
colnames(wine.df) <- c("origin", "alcohol", "acid",
"ash", "alcalinity", "magnesium",
"phenols", "flavanoids", "nonflavanoid",
"proanthocyanins","color.int", "hue",
"od", "proline")
wine.df$origin <- as.factor(wine.df$origin)
wine.df2 <- data.frame(origin = wine.df$origin, scale(wine.df[,-1]))
wine.df2 <- gather(wine.df2, type,  value, -1)
ggplot(data = wine.df2, mapping = aes(x = origin, y = value)) +
geom_boxplot() + facet_wrap(~as.factor(type))
ggplot(data = wine.df, mapping=aes(x = flavanoids,
y = phenols,
color =  origin,
shape = origin)) +
geom_point()
with(wine.df, table(origin))
pbeta(n=20, shape1 = 1, shape2 = 2)
rbeta(n=20, shape1 = 1, shape2 = 2)
# BETA
rbeta(n=20, shape1 = 1, shape2 = 2)
# CAUCHY
rcauchy(n=20)
# BETA
rbeta(n=20, shape1 = 1, shape2 = 2)
# CAUCHY
rcauchy(n=20)
# POISSON
rpois(n = 20)
# BETA
rbeta(n=20, shape1 = 1, shape2 = 2)
# CAUCHY
rcauchy(n=20)
# POISSON
rpois(n = 20, lambda = 2)
# BETA
rbeta(n=20, shape1 = 1, shape2 = 2)
# CAUCHY
rcauchy(n=20)
# POISSON
rpois(n = 20, lambda = 2)
# LOGISTICS
rlogis(n = 20)
# BETA
rbeta(n=20, shape1 = 1, shape2 = 2)
# CAUCHY
rcauchy(n=20)
# POISSON
rpois(n = 20, lambda = 2)
# LOGISTICS
rlogis(n = 20)
# F
rf(n = 20, df1 = 1, df2 = 1)
bankroll.fun <- function(risk, games = 1000){
initial <- 100
trial_simulation <- runif(games)
trial_simulation
trial_vector <- c()
for (var in 1:games){
if (trial_simulation[var] <= 0.55){
trial_vector[var] <- initial * (1 + risk)
}else {
trial_vector[var] <- initial * (1 - risk)
}
}
return(mean(trial_vector, na.rm = T))
}
bankroll.fun(0.9)
bankroll.fun <- function(risk, games = 1000){
initial <- 100
trial_simulation <- runif(games)
print(trial_simulation)
trial_vector <- c()
for (var in 1:games){
if (trial_simulation[var] <= 0.55){
trial_vector[var] <- initial * (1 + risk)
}else {
trial_vector[var] <- initial * (1 - risk)
}
}
return(mean(trial_vector, na.rm = T))
}
bankroll.fun(0.9)
bankroll.fun <- function(risk, games = 1000){
initial <- 100
trial_simulation <- runif(games)
#print(trial_simulation)
trial_vector <- c()
for (var in 1:games){
if (trial_simulation[var] <= 0.55){
trial_vector[var] <- initial * (1 + risk)
}else {
trial_vector[var] <- initial * (1 - risk)
}
}
return(mean(trial_vector, na.rm = T))
}
bankroll.fun(0.9)
bankroll.fun(0.2)
bankroll.fun <- function(risk, games = 1000){
initial.dollars <- 100
trial.simulation <- runif(games)
#print(trial_simulation)
trial.vector <- c()
for (var in 1:games){
if (trial.simulation[var] <= 0.55){
trial.vector[var] <- initial.dollars * (1 + risk)
}
}
return(mean(trial_vector, na.rm = T))
}
bankroll.fun(0.9)
bankroll.fun <- function(risk, games = 1000){
initial.dollars <- 100
trial.simulation <- runif(games)
#print(trial_simulation)
trial.vector <- c()
for (var in 1:games){
if (trial.simulation[var] <= 0.55){
trial.vector[var] <- initial.dollars * (1 + risk)
}
}
return(mean(trial.vector, na.rm = T))
}
bankroll.fun(0.9)
bankroll.fun <- function(risk, games = 1000){
initial.dollars <- 100
games.simulation <- runif(games)
trial.vector <- c()
for (var in 1:games){
if (games.simulation[var] <= 0.55){
initial.dollars <- initial.dollars * (1 + risk)
}else {
initial.dollars <- initial.dollars * (1 - risk)
}
}
return(initial.dollars)
}
replycate = 1000
trial.vector <- replicate(replycate, bankroll.fun(.8))
mean(trial.vector, na.rm = T)
bankroll.fun <- function(risk, games = 1000){
initial.dollars <- 100
games.simulation <- runif(games)
trial.vector <- c()
for (var in 1:games){
if (games.simulation[var] <= 0.55){
initial.dollars <- initial.dollars * (1 + risk)
}else {
initial.dollars <- initial.dollars * (1 - risk)
}
}
return(initial.dollars)
}
replycate = 500
trial.vector <- replicate(replycate, bankroll.fun(.8))
mean(trial.vector, na.rm = T)
bankroll.fun <- function(risk, games = 1000){
initial.dollars <- 100
games.simulation <- runif(games)
trial.vector <- c()
for (var in 1:games){
if (games.simulation[var] <= 0.55){
initial.dollars <- initial.dollars * (1 + risk)
}else {
initial.dollars <- initial.dollars * (1 - risk)
}
}
return(initial.dollars)
}
replycate = 500
trial.vector <- replicate(replycate, bankroll.fun(.8))
mean(trial.vector, na.rm = T)
bankroll.fun <- function(risk, games = 1000){
initial.dollars <- 100
games.simulation <- runif(games)
trial.vector <- c()
for (var in 1:games){
if (games.simulation[var] <= 0.55){
initial.dollars <- initial.dollars * (1 + risk)
}else {
initial.dollars <- initial.dollars * (1 - risk)
}
}
return(initial.dollars)
}
replycate = 500
trial.vector <- replicate(replycate, bankroll.fun(.8))
mean(trial.vector, na.rm = T)
bankroll.fun <- function(risk, games = 1000){
initial.dollars <- 100
games.simulation <- runif(games)
trial.vector <- c()
for (var in 1:games){
if (games.simulation[var] <= 0.55){
initial.dollars <- initial.dollars * (1 + risk)
}else {
initial.dollars <- initial.dollars * (1 - risk)
}
}
return(initial.dollars)
}
replycate = 500
trial.vector <- replicate(replycate, bankroll.fun(.8))
mean(trial.vector, na.rm = T)
bankroll.fun <- function(risk, games = 1000){
initial.dollars <- 100
games.simulation <- runif(games)
trial.vector <- c()
for (var in 1:games){
if (games.simulation[var] <= 0.55){
initial.dollars <- initial.dollars * (1 + risk)
}else {
initial.dollars <- initial.dollars * (1 - risk)
}
}
return(initial.dollars)
}
replycate = 500
trial.vector <- replicate(replycate, bankroll.fun(.8))
mean(trial.vector, na.rm = T)
bankroll.fun <- function(risk, games = 1000){
initial.dollars <- 100
games.simulation <- runif(games)
trial.vector <- c()
for (var in 1:games){
if (games.simulation[var] <= 0.55){
initial.dollars <- initial.dollars * (1 + risk)
}else {
initial.dollars <- initial.dollars * (1 - risk)
}
}
return(initial.dollars)
}
replycate = 500
trial.vector <- replicate(replycate, bankroll.fun(.8))
mean(trial.vector, na.rm = T)
bankroll.fun <- function(risk, games = 1000){
initial.dollars <- 100
games.simulation <- runif(games)
trial.vector <- c()
for (var in 1:games){
if (games.simulation[var] <= 0.55){
initial.dollars <- initial.dollars * (1 + risk)
}else {
initial.dollars <- initial.dollars * (1 - risk)
}
}
return(initial.dollars)
}
replycate = 500
trial.vector <- replicate(replycate, bankroll.fun(.8))
mean(trial.vector, na.rm = T)
bankroll.fun <- function(risk, games = 1000){
initial.dollars <- 100
games.simulation <- runif(games)
trial.vector <- c()
for (var in 1:games){
if (games.simulation[var] <= 0.55){
initial.dollars <- initial.dollars * (1 + risk)
}else {
initial.dollars <- initial.dollars * (1 - risk)
}
}
return(initial.dollars)
}
replycate = 500
trial.vector <- replicate(replycate, bankroll.fun(.8))
mean(trial.vector, na.rm = T)
bankroll.fun <- function(risk, games = 1000){
initial.dollars <- 100
games.simulation <- runif(games)
trial.vector <- c()
for (var in 1:games){
if (games.simulation[var] <= 0.55){
initial.dollars <- initial.dollars * (1 + risk)
}else {
initial.dollars <- initial.dollars * (1 - risk)
}
}
return(initial.dollars)
}
replycate = 500
trial.vector <- replicate(replycate, bankroll.fun(.8))
mean(trial.vector, na.rm = T)
bankroll.fun <- function(risk, games = 1000){
initial.dollars <- 100
games.simulation <- runif(games)
trial.vector <- c()
for (var in 1:games){
if (games.simulation[var] <= 0.55){
initial.dollars <- initial.dollars * (1 + risk)
}else {
initial.dollars <- initial.dollars * (1 - risk)
}
}
return(initial.dollars)
}
replycate = 500
trial.vector <- replicate(replycate, bankroll.fun(.8))
mean(trial.vector, na.rm = T)
bankroll.fun <- function(risk, games = 1000){
initial.dollars <- 100
games.simulation <- runif(games)
for (var in 1:games){
if (games.simulation[var] <= 0.55){
initial.dollars <- initial.dollars * (1 + risk)
}else {
initial.dollars <- initial.dollars * (1 - risk)
}
}
return(initial.dollars)
}
replycate = 500
trial.vector <- replicate(replycate, bankroll.fun(.8))
mean(trial.vector, na.rm = T)
replycate = 1000
trial.vector_1000 <- replicate(replycate, bankroll.fun(.2))
mean(trial.vector_1000, na.rm = T)
replycate = 1000
trial.vector_1000 <- replicate(replycate, bankroll.fun(.2))
mean(trial.vector_1000, na.rm = T)
replycate = 1000
trial.vector_1000 <- replicate(replycate, bankroll.fun(.2))
mean(trial.vector_1000, na.rm = T)
replycate = 1000
trial.vector_1000 <- replicate(replycate, bankroll.fun(.2))
mean(trial.vector_1000, na.rm = T)
replycate = 1000
y_axis <- c()
x_axis <- seq(.1, 10, by =.1)
for (var in 1:length(x_axis)){
y_values <- replicate(replycate, bankroll.fun(x_axis[var]))
y_axis[i] <- mean(y_values, na.rm = T)
}
# Plot the graph
df <- data_frame(x = x_axis, y=y_axis)
replycate = 1000
y_axis <- c()
x_axis <- seq(.1, 10, by =.1)
for (var in 1:length(x_axis)){
y_values <- replicate(replycate, bankroll.fun(x_axis[var]))
y_axis[i] <- mean(y_values, na.rm = T)
}
y_axis
replycate = 1000
y_axis <- c()
x_axis <- seq(.01, 1, by =.01)
for (var in 1:length(x_axis)){
y_values <- replicate(replycate, bankroll.fun(x_axis[var]))
y_axis[i] <- mean(y_values, na.rm = T)
}
y_axis
replycate = 1000
y_axis <- c()
x_axis <- seq(.01, 1, by =.01)
for (var in 1:length(x_axis)){
y_values <- replicate(replycate, bankroll.fun(x_axis[var]))
y_axis[i] <- mean(y_values)
}
y_axis
x_axis
replycate = 1000
x_axis <- seq(.01, 1, by =.01)
y_axis <- numeric(length = length(x_axis))
for (var in 1:length(x_axis)){
y_values <- replicate(replycate, bankroll.fun(x_axis[var]))
y_axis[i] <- mean(y_values)
}
y_axis
replycate = 1000
x_axis <- seq(.01, 1, by =.01)
y_axis <- numeric(length = length(x_axis))
for (var in 1:length(x_axis)){
y_values <- replicate(replycate, bankroll.fun(x_axis[var]))
y_axis[i] <- mean(y_values, na.rm = T)
}
x_axis
y_axis
replycate = 1000
x_axis <- seq(.01, 1, by =.01)
y_axis <- numeric(length = length(x_axis))
for (var in 1:length(x_axis)){
y_values <- replicate(replycate, bankroll.fun(x_axis[var]))
y_axis[var] <- mean(y_values, na.rm = T)
}
y_axis
# Plot the graph
df <- data_frame(x = x_axis, y=y_axis)
ggplot(df, aes(x, y)) +
geom_line(aes(color = "red")) +
labs(x = "Simulations percentage risk", y = "Capital value", title = "Capital simulation of 1000")
# Plot the graph
df <- data_frame(x = x_axis, y=y_axis)
ggplot(df, aes(x, y)) +
geom_line(aes(color = "red")) +
labs(x = "Simulations percentage risk", y = "Capital value", title = "Capital simulation of 1000") + continuous_scale("log2")
# Plot the graph
df <- data_frame(x = x_axis, y=y_axis)
ggplot(df, aes(x, y)) +
geom_line(aes(color = "red")) +
labs(x = "Simulations percentage risk", y = "Capital value", title = "Capital simulation of 1000") + continuous_scale(trans = "log2")
# Plot the graph
df <- data_frame(x = x_axis, y=y_axis)
ggplot(df, aes(x, y)) +
geom_line(aes(color = "red")) +
labs(x = "Simulations percentage risk", y = "Capital value", title = "Capital simulation of 1000") + continuous_y_scale(trans = "log2")
# Plot the graph
df <- data_frame(x = x_axis, y=y_axis)
ggplot(df, aes(x, y)) +
geom_line(aes(color = "red")) +
labs(x = "Simulations percentage risk", y = "Capital value", title = "Capital simulation of 1000") + scale_y_continuous(trans = "log2")
# Plot the graph
df <- data_frame(x = x_axis, y=y_axis)
ggplot(df, aes(x, y)) +
geom_line(aes(color = "red")) +
labs(x = "Simulations percentage risk", y = "Capital value", title = "Capital simulation of 1000") + scale_y_continuous(trans = "log2")
# Plot the graph
df <- data_frame(x = x_axis, y=y_axis)
ggplot(df, aes(x, y)) +
geom_point(aes(color = "red")) +
labs(x = "Simulations percentage risk", y = "Capital value", title = "Capital simulation of 1000") + scale_y_continuous(trans = "log2")
# Plot the graph
df <- data_frame(x = x_axis, y=y_axis)
ggplot(df, aes(x, y)) +
geom_point(aes(color = "red")) +
labs(x = "Simulations percentage risk", y = "Capital value", title = "Capital simulation of 1000") + scale_y_continuous(trans = "log2", limits=c(NA,1))
# Plot the graph
df <- data_frame(x = x_axis, y=y_axis)
ggplot(df, aes(x, y)) +
geom_point(aes(color = "red")) +
labs(x = "Simulations percentage risk", y = "Capital value", title = "Capital simulation of 1000") + scale_y_continuous(trans = "log2", limits=c(-1,1))
# Plot the graph
df <- data_frame(x = x_axis, y=y_axis)
ggplot(df, aes(x, y)) +
geom_point(aes(color = "red")) +
labs(x = "Simulations percentage risk", y = "Capital value", title = "Capital simulation of 1000") + scale_y_continuous(trans = "log10")
replycate = 1000
x_axis <- seq(.01, 1, by =.01)
y_axis <- numeric(length = length(x_axis))
for (var in 1:length(x_axis)){
y_values <- replicate(replycate, bankroll.fun(x_axis[var]))
y_axis[var] <- mean(y_values, na.rm = T)
}
# Plot the graph
df <- data_frame(x = x_axis, y=y_axis)
ggplot(df, aes(x, y)) +
geom_point(aes(color = "red")) +
labs(x = "Simulations percentage risk", y = "Capital value", title = "Capital simulation of 1000") + scale_y_continuous(trans = "log10")
# Plot the graph
df <- data_frame(x = x_axis, y=y_axis)
ggplot(df, aes(x, y)) +
geom_point(aes(color = "red")) +
labs(x = "Simulations percentage risk", y = "Capital value", title = "Capital simulation of 1000") + scale_y_continuous(trans = "log10")
labs(x = "Simulations percentage risk", y = "Capital value", title = "Capital simulation of 1000") + scale_y_continuous(trans = "log10")
restart
