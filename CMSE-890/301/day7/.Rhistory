weight[-3]
lessWeight <- weight[-c(1, 3, 5)]
lessWeight
age <- c("middle age", "senior", "middle age", "senior", "senior", "senior", "senior", "middle age")
age
income <- c("lower", "lower", "upper", "middle", "upper", "lower", "lower", "middle")
income
age <- factor(age, levels=c("youth", "young adult", "middle age", "senior"))
age
income <- factor(income, levels=c("lower", "middle", "upper"),ordered = TRUE)
income
x = c(2,3,4)
y = c(5,6,7)
y + x
x_small = c(1,2,3)
y_big = c(1,2,3,4,5,6)
x_small + y_big
missingCharacter <- c("dog", "cat", NA, "pig", NA, "horse")
missingCharacter
is.na(missingCharacter)
mean(c(1, 2, 3, NA, 5), na.rm = TRUE)
healthData <- data.frame(Weight = weight, Gender=gender, bp.meds = bp,  stringsAsFactors=FALSE)
healthData
names(healthData)
colnames(healthData)
names(healthData) <- c("Wt", "Gdr", "bp")
healthData
rownames(healthData)
names(healthData) <- c("Weight", "Gender", "bp.meds")
healthData
data(mtcars)
head(mtcars)
mtcars[3, 4]
mtcars[1:3, 2:3]
mtcars["cyl"]
mtcars[, 1]
mtcars$mpg
mpgHpLinMod <- lm(mpg ~ hp, data = mtcars)
mode(mpgHpLinMod)
names(mpgHpLinMod)
mpgHpLinMod$coefficients
temporaryList <- list(first=weight, second=healthData, pickle=list(a = 1:10, b=healthData))
temporaryList$first
temporaryList[[1]]
temporaryList$second
temporaryList[c(1, 2)] # returns a list with 1st and 2nd elements
temporaryList[[c(1, 2)]]
temporaryList[2]
my_list = list(1, 2, 3, c(3, 5, 6), c("a", "b", "c"))
my_list[1]
my_list[[1]]
my_list[[c(4, 2)]]
weight
gender
gender[weight > 200]
lightweight <- weight[weight < 200]
lightweight
x <- 1:10
x
x[x < 5] <- 0
x
x = c(-3:3)
x
z <- c(T, F, F, T, F, F, F)
x[z]
healthData
healthData$Weight[healthData$Gender == "male"]
healthData[healthData$Weight > 190, 2:3]
temporaryDataFrame <- data.frame(V1 = c(1, 2, 3, 4, NA), V2 = c(NA, 1, 4, 5, NA), V3 = c(1, 2, 3, 5, 7))
temporaryDataFrame
is.na(temporaryDataFrame)
rowSums(is.na(temporaryDataFrame))
colSums(is.na(temporaryDataFrame))
seq(from = 0, to = 1, length = 11)
seq(from = 1, to = 5, by = 1/3)
rep(c(1, 2, 4), length = 9)
rep(c(1, 2, 4), times = 3)
rep(c("a", "b", "c"), times = c(3, 2, 7))
u.corn <- "http://blue.for.msu.edu/FOR875/data/corn.csv"
corn <- read.csv(u.corn, header = TRUE)
corn
paired_t <- function(x1, x2) {
n <- length(x1)
dbar <- mean(x1 - x2)
s_d <- sd(x1 - x2)
tstat <- dbar/(s_d/sqrt(n))
pval <- 2 * (1 - pt(abs(tstat), n - 1))
margin <- qt(0.975, n - 1) * s_d/sqrt(n)
lcl <- dbar - margin
ucl <- dbar + margin
return(list(tstat = tstat, pval = pval, lcl = lcl, ucl = ucl))
}
paired_t(x1 = corn$kiln_dried, x2 = corn$regular)
c(FALSE, TRUE, FALSE) || c(TRUE, FALSE, FALSE)
c(FALSE, TRUE, FALSE) | c(TRUE, FALSE, FALSE)
c(FALSE, TRUE, FALSE) && c(TRUE, TRUE, FALSE)
c(FALSE, TRUE, FALSE) & c(TRUE, TRUE, FALSE)
Sign <- function(x) {
if (x < 0) {
print("the number is negative")
}else if (x > 0) {
print("the number is positive")
}else {
print("the number is zero")
}
}
Sign(3)
Sign(-3)
Sign(0)
2^-30
2^-30 + (2^30 - 2^30)
(2^-30 + 2^30) - 2^30
1.5 - 1.4 == 0.1
all.equal((1.5 - 1.4), 0.1)
k <- 1
repeat {
if (1 == 1 + 1/2^k){
break
}else {
k <- k + 1
}
}
k
k <- 1
while (1 != 1 + 1/2^k) {
k <- k + 1
}
k
x <- 1:10
S <- 0
for (i in 1:length(x)){
S <- S + x[i]
}
S
data("mtcars")
ggplot(data = mtcars,
mapping = aes(x=hp, y=mpg)) +
geom_point(aes(color = factor(cyl),
shape = factor(am)),
size=5)
u.newcomb <- "http://blue.for.msu.edu/FOR875/data/Newcomb.csv"
Newcomb <- read.csv(u.newcomb, header = TRUE)
head(Newcomb)
ggplot(Newcomb, aes(x = Time)) + geom_histogram()
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
u.newcomb <- "http://blue.for.msu.edu/FOR875/data/Newcomb.csv"
Newcomb <- read.csv(u.newcomb, header = TRUE)
head(Newcomb)
ggplot(Newcomb, aes(x = Time)) + geom_histogram()
ggplot(Newcomb, aes(x = Time)) +
geom_histogram(binwidth = 5, color = "black", fill = "blue" )
library(gapminder)
install.packages(gapminder).
install.packages(gapminder)
install.packages("gapminder")
library(gapminder)
ggplot(data = subset(gapminder, year == 2002),
aes(x = continent, y = gdpPercap)) +
geom_boxplot(color = "black", fill = "lightblue")
library(gapminder)
ggplot(data = subset(gapminder, year == 2002),
aes(x = continent, y = gdpPercap)) +
geom_boxplot(color = "black", fill = "lightblue")
ggplot(data = subset(gapminder, year == 2002),
aes(x = continent, y = gdpPercap)) +
geom_boxplot(color = "red", fill = "lightblue") +
scale_x_discrete(name = "Continent") +
scale_y_continuous(name = "Per Capita GDP") + coord_flip()
ggplot(StudentGoals, aes(x = Goals)) + geom_bar()
u.goals <- "http://blue.for.msu.edu/FOR875/data/StudentGoals.csv"
StudentGoals <- read.csv(u.goals, header = TRUE)
head(StudentGoals)
ggplot(StudentGoals, aes(x = Goals)) + geom_bar()
ggplot(StudentGoals, aes(x = Goals, fill = Gender)) + geom_bar()
ggplot(StudentGoals, aes(x = Goals, fill = Gender)) +
geom_bar(position = "dodge")
ggplot(subset(gapminder, country == "India"), aes(x = year, y = gdpPercap)) +
geom_bar(stat = "identity", color = "black", fill = "steelblue2") +
ggtitle("India's per-capita GDP")
x <- seq(-pi, pi, len = 1000)
sin.data <- data.frame(x = x, y = sin(x))
ggplot(data = sin.data, aes(x = x, y = y)) + geom_line() +
scale_y_continuous(name = "sin(x)")
ggplot(data = sin.data, aes(x = x, y = y)) + geom_line() +
scale_y_continuous(name = "sin(x)") +
theme_classic()
ggplot(filename = "sin-plot.pdf", device="pdf")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
str(diamonds)
diamond.plot <- ggplot(data=diamonds, aes(x=carat, y=price, colour = color))
diamond.plot + geom_point() + facet_wrap(~cut)
ggplot(data=diamonds, aes(x = cut, y = count)) +
geom_bar(stat = "identity", color = "black", fill = "steelblue2") +
ggtitle("India's per-capita GDP")
ggplot(data=diamonds, aes(x = cut, y = counts)) +
geom_bar(stat = "identity", color = "black", fill = "steelblue2") +
ggtitle("India's per-capita GDP")
library(ggplot2)
str(diamonds)
ggplot(data=diamonds, aes(x = cut)) +
geom_bar(stat = "identity", color = "black", fill = "steelblue2") +
ggtitle("Plot a")
ggplot(diamonds, aes(x = cut)) + geom_bar()
ggplot(StudentGoals, aes(x = Goals)) + geom_bar()
ggplot(StudentGoals, aes(x = Goals, fill = Gender)) + geom_bar()
ggplot(StudentGoals, aes(x = Goals, fill = Gender)) +
geom_bar(position = "dodge")
ggplot(diamonds, aes(x = cut, fill = clarity)) + geom_bar()
ggplot(diamonds, aes(x = cut, fill = clarity)) +
geom_bar(position = "dodge")
ggplot(Newcomb, aes(x = Time)) +
geom_histogram(binwidth = 5, color = "black", fill = "blue" )
ggplot(diamonds, aes(x = carat)) +
geom_histogram(binwidth = 5, color = "black", fill = cut )
ggplot(diamonds, aes(x = carat)) +
geom_histogram(binwidth = 5, color = "black", fill = "blue" )
ggplot(diamonds, aes(x = carat, fill = cut)) +
geom_histogram(binwidth = 5, color = "black" )
ggplot(diamonds, aes(x = carat, fill = cut)) +
geom_histogram()
ggplot(diamonds, aes(x = carat, fill = cut)) +
geom_histogram(binwidth = 0.15, color = "black" )
ggplot(diamonds, aes(x = carat, fill = cut)) +
geom_histogram(binwidth = 0.15 )
ggplot(diamonds, aes(x = price)) +
geom_histogram(binwidth = 0.15 )
ggplot(diamonds, aes(x = price)) +
geom_histogram(binwidth = 0.15 )
ggplot(diamonds, aes(x = price)) +
geom_histogram(binwidth = 0.15 )
ggplot(diamonds, aes(x = price)) +
geom_histogram()
ggplot(diamonds, aes(x = price)) +
geom_histogram(binwidth = 1000 )
ggplot(diamonds, aes(x = price)) +
geom_histogram(binwidth = 1000, color = "lightblue" )
ggplot(diamonds, aes(x = price, fill = "lightblue")) +
geom_histogram(binwidth = 1000 )
ggplot(diamonds, aes(x = price)) +
geom_histogram(binwidth = 1000, fill = "lightblue" )
ggplot(diamonds, aes(x = price)) +
geom_histogram(binwidth = 1000, fill = "lightblue", color ="darkgreen" )
geom_vline()
geom_vline()?
t
geom_vline?
t
ggplot(diamonds, aes(x = price)) +
geom_histogram(binwidth = 1000, fill = "lightblue", color ="darkgreen" ) +
geom_vline()
ggplot(diamonds, aes(x = price)) +
geom_histogram(binwidth = 1000, fill = "lightblue", color ="darkgreen" ) +
geom_vline(xintercept = 5)
ggplot(diamonds, aes(x = price)) +
geom_histogram(binwidth = 1000, fill = "lightblue", color ="darkgreen" ) +
geom_vline(xintercept = 5, xintercept = 5)
ggplot(diamonds, aes(x = price)) +
geom_histogram(binwidth = 1000, fill = "lightblue", color ="darkgreen" ) +
geom_vline(aes(xintercept = mean(x)))
ggplot(diamonds, aes(x = price)) +
geom_histogram(binwidth = 1000, fill = "lightblue", color ="darkgreen" ) +
geom_vline(aes(xintercept = mean(price)))
ggplot(diamonds, aes(x = price)) +
geom_histogram(binwidth = 1000, fill = "lightblue", color ="darkgreen" ) +
geom_vline(aes(xintercept = mean(price))) +
geom_vline(aes(xintercept = median(price)))
ggplot(diamonds, aes(x = price)) +
geom_histogram(binwidth = 1000, fill = "lightblue", color ="darkgreen" ) +
geom_vline(aes(xintercept = mean(price), , color="darkred")) +
geom_vline(aes(xintercept = median(price), color="darkorange"))
ggplot(diamonds, aes(x = price)) +
geom_histogram(binwidth = 1000, fill = "lightblue", color ="darkgreen" ) +
geom_vline(aes(xintercept = mean(price), color="darkred")) +
geom_vline(aes(xintercept = median(price), color="darkorange"))
knitr::opts_chunk$set(echo = TRUE)
ggplot(diamonds, aes(x = price)) +
geom_histogram(binwidth = 1000, fill = "lightblue", color ="darkgreen" ) +
geom_vline(aes(xintercept = mean(price), color="darkred")) +
geom_vline(aes(xintercept = median(price)), color="darkorange")
ggplot(diamonds, aes(x = price)) +
geom_histogram(binwidth = 1000, fill = "lightblue", color ="darkgreen" ) +
geom_vline(aes(xintercept = mean(price)), color="darkred") +
geom_vline(aes(xintercept = median(price)), color="darkorange")
library(gapminder)
ggplot(data = subset(gapminder, year == 2002),
aes(x = continent, y = gdpPercap)) +
geom_boxplot(color = "black", fill = "lightblue")
ggplot(data = subset(gapminder, year == 2002),
aes(x = continent, y = gdpPercap)) +
geom_boxplot(color = "red", fill = "lightblue") +
scale_x_discrete(name = "Continent") +
scale_y_continuous(name = "Per Capita GDP") + coord_flip()
ggplot(data = diamonds,
aes(x = price, y = cut)) +
geom_boxplot(color = "red", fill = "lightblue") +
scale_x_discrete(name = "Continent") +
scale_y_continuous(name = "Per Capita GDP") + coord_flip()
ggplot(data = diamonds,
aes(x = price, y = cut)) +
geom_boxplot(color = "red", fill = "lightblue") +
coord_flip()
ggplot(data = diamonds,
aes(x = reorder(cut, price, FUN = median), y = cut)) +
geom_boxplot(color = "red", fill = "lightblue") +
coord_flip()
ggplot(data = diamonds,
aes(x = reorder(cut, price, FUN = median), y = cut)) +
geom_boxplot(color = "darkgrey", fill = "purple") +
coord_flip()
ggplot(data = diamonds,
aes(y = reorder(cut, price, FUN = median), x = cut)) +
geom_boxplot(color = "darkgrey", fill = "purple") +
coord_flip()
ggplot(data = diamonds,
aes(x = reorder(cut, price, FUN = median), y = price)) +
geom_boxplot(color = "darkgrey", fill = "purple") +
coord_flip()
ggplot(data = diamonds,
aes(x = reorder(cut, price, FUN = median), y = price)) +
geom_boxplot(color = "darkgrey", fill = "purple") +
coord_flip() +
scale_x_discrete(name = "Continent")
ggplot(data = diamonds,
aes(x = reorder(cut, price, FUN = median), y = price)) +
geom_boxplot(color = "darkgrey", fill = "purple") +
coord_flip() +
scale_x_discrete(name = "count")
ggplot(data = diamonds,
aes(x = reorder(cut, price, FUN = median), y = price)) +
geom_boxplot(color = "darkgrey", fill = "purple") +
coord_flip() +
labs(y = "count")
ggplot(data = diamonds,
aes(x = reorder(cut, price, FUN = median), y = price)) +
geom_boxplot(color = "darkgrey", fill = "purple") +
coord_flip() +
labs(x = "count", y="price")
ggplot(data = diamonds,
aes(x = reorder(cut, price, FUN = median), y = price)) +
geom_boxplot(color = "darkgrey", fill = "purple") +
coord_flip() +
labs(x = "cut", y="price")
ggplot(data = diamonds,
aes(x = reorder(cut, price, FUN = median), y = price)) +
geom_boxplot(color = "darkgrey", fill = "purple") +
coord_flip() +
labs(x = "cut", y="price") +
facet_wrap()
ggplot(data = diamonds,
aes(x = reorder(cut, price, FUN = median), y = price)) +
geom_boxplot(color = "darkgrey", fill = "purple") +
coord_flip() +
labs(x = "cut", y="price") +
facet_wrap(~factor(clarity))
ggplot(data = diamonds,
aes(x = reorder(cut, price, FUN = median), y = price)) +
geom_boxplot(color = "darkgrey", fill = "purple") +
coord_flip() +
labs(x = "cut", y="price") +
facet_wrap(~factor(clarity), nrow = 2)
diamonds.median <- aggregate(formula = price ~ color + cut,
data = diamonds, FUN = median)
str(diamonds.median)
ggplot(diamonds.median, aes(color, cut)) +
geom_raster(aes(fill = price))
ggplot(diamonds.median, aes(color, cut)) +
geom_raster(aes(fill = price)) +
labs(title = "Heatmap for the median price of the diamonds")
diamonds.median2 <- aggregate(formula = price ~ color + cut + clarity,
data = diamonds, FUN = median)
str(diamonds.median2)
ggplot(diamonds.median2, aes(color, cut)) +
geom_raster(aes(fill = price)) +
facet_wrap(~factor(clarity), nrow = 2) +
labs(title = "Heatmap for the median price of the diamonds")
# generate 1000000 random variables from two normal distributions
x <- rnorm(1000000, mean = 0, sd = 1)
y <- rnorm(1000000, mean = 3, sd = 2)
# create a data frame
norm_df <- data.frame(value = c(x, y), norm = rep(c("x", "y"), each = 1000000))
# plot the densities
ggplot(data = norm_df, aes(x = value, fill = norm)) +
geom_density(alpha = 0.50) +
labs(x = "Value", y = "Density",
title = "Normal probability density functions")+
theme_bw() +
scale_fill_discrete(name = "",
breaks = c("x", "y"),
labels = c("Normal(0, 1)", "Normal(3, 2)"))
table1 <- read_csv("20170926_tidy_table1.csv", na="?")
table2 <- read_csv("20170926_tidy_table2.csv", na="?")
require(tidyverse)
table1 <- read_csv("20170926_tidy_table1.csv", na="?")
table2 <- read_csv("20170926_tidy_table2.csv", na="?")
table1
table2
str(parse_logicalc("T", "F", "T", "T", "F", "T"))
str(parse_logical(c("T", "F", "T", "T", "F", "T")))
parse_number(c("$1000", "25%", "ENSEMBLE2000"))
parse_double(1.25, locale = locale(decimal_mark = "."))
left_join(table1, table2)
table2 =spread(table2, key = type, value = count)
left_join(table1, table2)
nsp1
nps1 <- read_csv("20170926_table1_snps1.csv", na="?")
nps1
snps1 <- read_csv("20170926_table1_snps1.csv", na="?")
snps1
snps1 <- read_csv("20170926_table1_snps1.csv", na="?")
setwd("~/Documents/Classes/Data-R/CMSE-890/301/day7")
snps1 <- read_csv("20170926_table1_snps1.csv", na="?")
snps1
snps1 <- read_csv("20170926_tidy_table1", na="?")
snps1
snps1 <- read_csv("20170926_tidy_table1", na="?")
setwd("~/Documents/Classes/Data-R/CMSE-890/301/day7")
ls
snps1 <- read_csv("20170926_tidy_table1", na="?")
snps1
snps1 <- read_csv("20170926_tidy_table1.csv", na="?")
snps1
snps1_separate <- separate(RefAlt, into = c("Ref", "Alt"), sep="")
snps1_separate
snps1_separate <- snps1 %>% separate(RefAlt, into = c("Ref", "Alt"), sep="")
snps1_separate
snps1 <- read_csv("20170926_tidy_table1.csv", na="?")
snps1
snps1_separate <- snps1 %>% separate(RefAlt, into = c("Ref", "Alt"))
snps1_separate
snps1_separate <- snps1 %>% separate(RefAlt, into = c("Ref", "Alt"), sep=1)
snps1_separate
write_csv(snps1_separate, "separate_snsp1_table.csv")
run1 <- read_csv("20170926_diffGene_Run1.csv", na="?")
run2 <- read_csv("20170926_diffGene_Run2.csv", na="?")
run3 <- read_csv("20170926_diffGene_Run3.csv", na="?")
genes <- read_csv("20170926_diffGene_genes.csv.", na="?")
run1 <- read_csv("20170926_diffGene_Run1.csv", na="?")
run2 <- read_csv("20170926_diffGene_Run2.csv", na="?")
run3 <- read_csv("20170926_diffGene_Run3.csv", na="?")
genes <- read_csv("20170926_diffGene_genes.csv.", na="?")
genes <- read_csv("20170926_diffGene_genes.csv", na="?")
run1
run2
run3
genes
left_join(run1, run2)
run1 %>% left_join(run3, by="Gene")
run1 %>% left_join(genes, by="Gene")
run3 <- read_csv("20170926_diffGene_Run3.csv", na="?", col_names = c("Gene", "Value"))
run1 %>% left_join(genes, by="Gene")
run1
run1_genes <- run1 %>% left_join(genes, by="Gene")
run1_genes
run1_run3 <- run1_genes %>% left_join(run3, by= c("Gene", "Value"))
run1_run3
run1_run3 <- run1_genes %>% left_join(run3, by="Gene")
run1_run3
run1_run3 <- run1_genes %>% left_join(run3, by= c("Gene", "Value"))
run1_run3
run1_run3 <- run1_genes %>% full_join(run3, by= c("Gene", "Value"))
run1_run3
run1_run3 <- run1_genes %>% right_join(run3, by= c("Gene", "Value"))
run1_run3
run1_genes <- run1 %>% left_join(genes, by="Gene")
run1_genes
run1_run3 <- run1_genes %>% right_join(run3, by= c("Gene", "Value"))
run1_run3
run1_genes <- run1 %>% left_join(genes, by="Gene")
run1_genes
run1_run3 <- run1_genes %>% outer_join(run3, by= c("Gene", "Value"))
run1_run3
run1_run3 <- run1_genes %>% left_join(run3, by= c("Gene", "Value"))
run1_run3
run1_run3 <- run1_genes %>% anti_join(run3, by= c("Gene", "Value"))
run1_run3
run1_run3 <- run1_genes %>% anti_join(run3, by= c("Gene", "Value", "Pathway"))
run1_run3
run1_run3 <- run1_genes %>% left_join(run3, by= c("Gene", "Value", "Pathway"))
run1_run3
run1_run3 <- run1_genes %>% right_join(run3, by= c("Gene", "Value", "Pathway"))
run1_run3
run1
run2
run3
genes
# 8. Figure out how to put all the runs into a single tibble.
run1_genes <- run1 %>% left_join(genes, by="Gene")
run1_genes
run1_run3 <- run1_genes %>% right_join(run3, by= c("Gene", "Value", "Pathway"))
run1_run3
run1_run3 <- run1_genes %>% full_join(run3, by= c("Gene", "Value", "Pathway"))
run1_run3
run1_run3 <- run1_genes %>% full_join(run3, by= c("Gene", "Value"))
run1_run3
full_run <- run1_run3 %>% full_join(run2, by= c("Gene"))
full_run
full_run <- run1_run3 %>% full_join(run2, by= c("Gene"))
full_run
full_run <- run1_run3 %>% full_join(run2, by= c("Gene"))
run2 <- read_csv("20170926_diffGene_Run2.csv", na="?", col_names = "Gene")
full_run <- run1_run3 %>% full_join(run2, by= c("Gene"))
full_run
run2 <- read_csv("20170926_diffGene_Run2.csv", na="?", skip = 1, col_names = "Gene")
run2
run1_genes <- run1 %>% left_join(genes, by="Gene")
run1_genes
run1_run3 <- run1_genes %>% full_join(run3, by= c("Gene", "Value"))
run1_run3
full_run <- run1_run3 %>% full_join(run2, by= c("Gene"))
full_run
